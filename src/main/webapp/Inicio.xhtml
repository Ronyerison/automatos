<ui:composition xmlns="http://www.w3.org/1999/xhtml"
	xmlns:h="http://xmlns.jcp.org/jsf/html"
	xmlns:f="http://xmlns.jcp.org/jsf/core"
	xmlns:ui="http://xmlns.jcp.org/jsf/facelets"
	xmlns:p="http://primefaces.org/ui"
	template="/WEB-INF/templates/Layout.xhtml">

	<ui:define name="content">

		<h:form id="form" style="margin-top:30px">
			<p:growl id="messages" showDetail="true" style="margin-top:30px"/>
			<h:inputHidden id="automato" value="#{homeController.nodesJson}" />
			<p:fileUpload fileUploadListener="#{homeController.uploadArquivo}"
				multiple="true" mode="advanced" dragDropSupport="true" update=":#{p:component('form')}"
				sizeLimit="100000" oncomplete="preenche()"/>

			<p:panel id="panel" header="Visualização Automato"
				style="width: 880px; height: 650px; border-color: blue">
				<div id="paper"></div>
			</p:panel>
		</h:form>

<script type="text/javascript">
	function preenche(){

		var jsonAutomato = document.getElementById('form:automato').value;
		var automato = JSON.parse(jsonAutomato);
		var graph = new joint.dia.Graph();
	
		var paper = new joint.dia.Paper({
		    el: $('#paper'),
		    width: 860,
		    height: 600,
		    gridSize: 1,
		    model: graph
		});
	
		function state(x, y, label) {
		    
		    var cell = new joint.shapes.fsa.State({
		        position: { x: x, y: y },
		        size: { width: 60, height: 60 },
		        attrs: {
		            text : { text: label, fill: '#000000', 'font-weight': 'normal' },
		            'circle': {
		                fill: '#f6f6f6',
		                stroke: '#000000',
		                'stroke-width': 2
		            }
		        }
		    });
			graph.addCell(cell);
		    return cell;
		}
	
		function link(source, target, label, vertices) {
		    
		    var cell = new joint.shapes.fsa.Arrow({
		        source: { id: source.id },
		        target: { id: target.id },
		        labels: [{ position: 0.5, attrs: { text: { text: label || '', 'font-weight': 'bold' } } }],
		        vertices: vertices || []
		    });
		    graph.addCell(cell);
		    return cell;
		}

		var x = Math.floor((Math.random() * 700) + 100);
		var y = Math.floor((Math.random() * 500) + 100); 
		var start = new joint.shapes.fsa.StartState({ position: { x: x, y: y} });
		graph.addCell(start);
	
		var estadoInicial = state(automato.estadoInicial.info.x, automato.estadoInicial.info.y, automato.estadoInicial.info.label);
		var estados = new Array();
		estados[automato.estadoInicial.info.label] = estadoInicial;
		var l = link(start, estadoInicial, 'start');
		var i = 0;
		while(i != automato.estados.length){
			if(automato.estadoInicial.info.label != automato.estados[i].info.label){
				var source = state(automato.estados[i].info.x, automato.estados[i].info.y, automato.estados[i].info.label);
				estados[automato.estados[i].info.label] = source;
			}
			i++;
		}
		i = 0;
		while(i != automato.transicoes.length) {
			if(automato.transicoes[i].origem.info.label != automato.transicoes[i].destino.info.label){
				var l = link(estados[automato.transicoes[i].origem.info.label], estados[automato.transicoes[i].destino.info.label], automato.transicoes[i].info);
			}else{
				var pontos = automato.transicoes[i].pontos;
				var l = link(estados[automato.transicoes[i].origem.info.label], estados[automato.transicoes[i].destino.info.label], automato.transicoes[i].info,[{ x: pontos[0].x, y: pontos[0].y }, { x: pontos[1].x, y: pontos[1].y }]);
			}
			i++;
		}

// 		joint.layout.DirectedGraph.layout(graph, { setLinkVertices: true });
		

	}
</script>

	</ui:define>

</ui:composition>